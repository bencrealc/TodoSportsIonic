{"version":3,"file":"src_app_pages_account_account_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA+C;AACN;AACI;AACU;AACV;AACS;AACmC;AAC5C;AAE7C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,sDAAW;QACtB,IAAI,EAAE;YACJ,WAAW,EAAE,CAAC,WAAW,CAAC;SAC3B;QACD,WAAW,EAAE,CAAC,mGAAsB,CAAC;KACtC;CACF,CAAC;IAMW,iBAAiB,SAAjB,iBAAiB;CAAG;AAApB,iBAAiB;IAJ7B,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,uDAAW,EAAE,yDAAY,EAAE,uDAAW,EAAE,kEAAqB,CAAC,MAAM,CAAC,EAAE,gEAAe,CAAC;QACjG,YAAY,EAAE,CAAC,sDAAW,CAAC;KAC5B,CAAC;GACW,iBAAiB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;ACxBY;IAO7B,WAAW,SAAX,WAAW;CAAG;AAAd,WAAW;IALvB,wDAAS,CAAC;QACT,QAAQ,EAAE,aAAa;QACvB,oEAAgC;;KAEjC,CAAC;GACW,WAAW,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;ACP8B;AAC6C;AACpD;AACI;IAKtC,sBAAsB,SAAtB,sBAAsB;IACjC,YACU,MAAc,EACd,aAA4B,EAC5B,cAA8B,CAAC,mDAAmD;;QAFlF,WAAM,GAAN,MAAM,CAAQ;QACd,kBAAa,GAAb,aAAa,CAAe;QAC5B,mBAAc,GAAd,cAAc,CAAgB;IACrC,CAAC;IAEJ,WAAW,CAAC,KAA6B,EAAE,KAA0B;QACnE,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9C,6FAA6F;QAC7F,gFAAgF;QAChF,uCAAuC;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IAED,UAAU,CAAC,WAAqB,EAAE,GAAW;QAC3C,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACnD,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC5C,OAAO,IAAI,CAAC;aACb;YAED,IAAI,OAAO,EAAE;gBACX,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;gBACzE,IAAI,eAAe,EAAE;oBACnB,OAAO,IAAI,CAAC;iBACb;gBACD,IAAI,wDAAS,EAAE,EAAE;oBACf,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,WAAW,CAAC,CAAC;iBAC1E;gBACD,OAAO,KAAK,CAAC;aACd;YAED,0CAA0C;YAC1C,sDAAsD;YACtD,sEAAsE;YACtE,sBAAsB;YACtB,4CAA4C;YAC5C,2CAA2C;YAC3C,QAAQ;YACR,MAAM;YACN,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;YAEjD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;CACF;;YApD6C,mDAAM;YAC3C,yDAAa;YACb,4DAAc;;AAKV,sBAAsB;IAHlC,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,sBAAsB,CA6ClC;AA7CkC","sources":["./src/app/pages/account/account.module.ts","./src/app/pages/account/account.page.ts","./src/app/services/auth/user-route-access.service.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { UserRouteAccessService } from 'src/app/services/auth/user-route-access.service';\r\nimport { AccountPage } from './account.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AccountPage,\r\n    data: {\r\n      authorities: ['ROLE_USER'],\r\n    },\r\n    canActivate: [UserRouteAccessService],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [IonicModule, CommonModule, FormsModule, RouterModule.forChild(routes), TranslateModule],\r\n  declarations: [AccountPage],\r\n})\r\nexport class AccountPageModule {}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-account',\r\n  templateUrl: 'account.page.html',\r\n  styleUrls: ['account.page.scss'],\r\n})\r\nexport class AccountPage {}\r\n","import { Injectable, isDevMode } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { NavController } from '@ionic/angular';\r\nimport { AccountService } from './account.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserRouteAccessService implements CanActivate {\r\n  constructor(\r\n    private router: Router,\r\n    private navController: NavController,\r\n    private accountService: AccountService // private stateStorageService: StateStorageService\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Promise<boolean> {\r\n    const authorities = route.data['authorities'];\r\n    // We need to call the checkLogin / and so the accountService.identity() function, to ensure,\r\n    // that the client has a principal too, if they already logged in by the server.\r\n    // This could happen on a page refresh.\r\n    return this.checkLogin(authorities, state.url);\r\n  }\r\n\r\n  checkLogin(authorities: string[], url: string): Promise<boolean> {\r\n    return this.accountService.identity().then(account => {\r\n      if (!authorities || authorities.length === 0) {\r\n        return true;\r\n      }\r\n\r\n      if (account) {\r\n        const hasAnyAuthority = this.accountService.hasAnyAuthority(authorities);\r\n        if (hasAnyAuthority) {\r\n          return true;\r\n        }\r\n        if (isDevMode()) {\r\n          console.error('User has not any of required authorities: ', authorities);\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // this.stateStorageService.storeUrl(url);\r\n      // this.router.navigate(['accessdenied']).then(() => {\r\n      //     // only show the login dialog, if the user hasn't logged in yet\r\n      //     if (!account) {\r\n      //         // this.loginModalService.open();\r\n      //         console.log('go to login page');\r\n      //     }\r\n      // });\r\n      this.navController.navigateRoot('/accessdenied');\r\n\r\n      return false;\r\n    });\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}
{"version":3,"file":"src_app_pages_signup_signup_module_ts.js","mappings":"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","sources":["./src/app/pages/signup/signup.module.ts","./src/app/pages/signup/signup.page.ts","./src/app/services/user/user.service.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { SignupPage } from './signup.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SignupPage,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, IonicModule, RouterModule.forChild(routes), TranslateModule],\r\n  declarations: [SignupPage],\r\n})\r\nexport class SignupPageModule {}\r\n","import { Component, OnInit } from '@angular/core';\nimport { NavController, ToastController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { UserService } from '../../services/user/user.service';\nimport { Router, RouterModule } from '@angular/router';\nimport { ScreenOrientation } from '@awesome-cordova-plugins/screen-orientation/ngx';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.page.html',\n  styleUrls: ['./signup.page.scss'],\n})\nexport class SignupPage implements OnInit {\n  // The account fields for the signup form\n  account: {\n    login: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    password: string;\n    langKey: string;\n  } = {\n    login: '',\n    email: '',\n    firstName: '',\n    lastName: '',\n    password: '',\n    langKey: 'es',\n  };\n\n  // Our translated text strings\n  private signupErrorString: string;\n  private signupSuccessString: string;\n  private existingUserError: string;\n  private invalidPasswordError: string;\n\n  constructor(\n    public navController: NavController,\n    public userService: UserService,\n    private router: Router,\n    public toastController: ToastController,\n    private screenOrientation: ScreenOrientation,\n    public translateService: TranslateService\n  ) {\n    this.screenOrientation.lock(this.screenOrientation.ORIENTATIONS.PORTRAIT);\n    this.translateService.get(['SIGNUP_ERROR', 'SIGNUP_SUCCESS', 'EXISTING_USER_ERROR', 'INVALID_PASSWORD_ERROR']).subscribe(values => {\n      this.signupErrorString = values.SIGNUP_ERROR;\n      this.signupSuccessString = values.SIGNUP_SUCCESS;\n      this.existingUserError = values.EXISTING_USER_ERROR;\n      this.invalidPasswordError = values.INVALID_PASSWORD_ERROR;\n    });\n  }\n\n  ngOnInit() {}\n\n  doSignup() {\n    // Attempt to login in through our User service\n    this.userService.signup(this.account).subscribe(\n      async () => {\n        const toast = await this.toastController.create({\n          message: this.signupSuccessString,\n          duration: 3000,\n          position: 'top',\n        });\n        toast.present();\n        this.router.navigate(['/tabs/home']);\n      },\n      async response => {\n        // Unable to sign up\n        const error = JSON.parse(response.error);\n        let displayError = this.signupErrorString;\n        if (response.status === 400 && error.type.includes('already-used')) {\n          displayError = this.existingUserError;\n        } else if (\n          response.status === 400 &&\n          error.message === 'error.validation' &&\n          error.fieldErrors[0].field === 'password' &&\n          error.fieldErrors[0].message === 'Size'\n        ) {\n          displayError = this.invalidPasswordError;\n        }\n        const toast = await this.toastController.create({\n          message: displayError,\n          duration: 3000,\n          position: 'middle',\n        });\n        toast.present();\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { share } from 'rxjs/operators';\r\nimport { ApiService } from '../api/api.service';\r\nimport { LoginService } from '../login/login.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  private user: any;\r\n\r\n  constructor(public apiService: ApiService, public loginService: LoginService) {}\r\n\r\n  /**\r\n   * Send a POST request to our login endpoint with the data\r\n   * the user entered on the form.\r\n   */\r\n  login(accountInfo: any) {\r\n    this.loginService\r\n      .login(accountInfo)\r\n      .then(res => {\r\n        this.loggedIn(res);\r\n        return of(res);\r\n      })\r\n      .catch(err => {\r\n        console.error('ERROR', err);\r\n        return throwError(err);\r\n      });\r\n  }\r\n\r\n  findAll(): Observable<any> {\r\n    return this.apiService.get('users');\r\n  }\r\n\r\n  /**\r\n   * Send a POST request to our signup endpoint with the data\r\n   * the user entered on the form.\r\n   */\r\n  signup(accountInfo: any) {\r\n    return this.apiService.post('register', accountInfo, { responseType: 'text' as 'text' }).pipe(share());\r\n  }\r\n\r\n  /**\r\n   * Log the user out, which forgets the session\r\n   */\r\n  logout() {\r\n    this.loginService.logout();\r\n    this.user = null;\r\n  }\r\n\r\n  /**\r\n   * Process a login/signup response to store user data\r\n   */\r\n  private loggedIn(resp) {\r\n    this.user = resp.user;\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}